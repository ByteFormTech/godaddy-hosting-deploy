name: 'GoDaddy Hosting: Build & FTP Deploy'
description: 'Build a static site (Vite/React/Next export/etc.) and deploy to GoDaddy shared hosting via FTP/FTPS.'
author: 'Your Name'
branding:
  icon: 'upload-cloud'
  color: 'blue'

inputs:
  server-dir:
    description: 'Target directory on the FTP server, relative to the FTP root (e.g., ./ or ./subfolder/).'
    required: true
  node-version:
    description: 'Node.js version to use for the build.'
    required: false
    default: '20'
  build-cmd:
    description: 'Command to build the site. Ignored for static mode unless provided.'
    required: false
    default: 'npm run build'
  local-dir:
    description: 'Local build output folder to upload (fallback for static mode will create dist/).'
    required: false
    default: 'dist/'
  protocol:
    description: 'FTP protocol to use: ftp or ftps.'
    required: false
    default: 'ftps'
  clean-slate:
    description: 'If true, cleans the remote directory before syncing.'
    required: false
    default: 'true'
  log-level:
    description: 'Log verbosity: minimal | standard | verbose.'
    required: false
    default: 'minimal'

# Caller must provide FTP_HOST / FTP_USER / FTP_PASS via env.

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Banner
      shell: bash
      run: |
        echo "============================================================"
        echo "🚀 GoDaddy Hosting: Build & FTP Deploy"
        echo "============================================================"
        echo "::notice::Starting build & deploy…"

    # Detect project type and package manager/lockfile presence
    - id: detect
      name: Detect project type
      shell: bash
      run: |
        has_pkgjson="no"
        manager="none"
        lock="none"
        if [ -f package.json ]; then
          has_pkgjson="yes"
          if [ -f pnpm-lock.yaml ]; then manager="pnpm"; lock="pnpm-lock.yaml"; fi
          if [ -f yarn.lock ]; then manager="yarn"; lock="yarn.lock"; fi
          if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then manager="npm"; lock="npm-lock"; fi
        fi
        echo "has_pkgjson=$has_pkgjson" >> "$GITHUB_OUTPUT"
        echo "manager=$manager" >> "$GITHUB_OUTPUT"
        echo "lock=$lock" >> "$GITHUB_OUTPUT"

    - name: Preflight path check
      shell: bash
      run: |
        if [[ "${{ inputs.server-dir }}" == /*home* ]]; then
          echo "::warning::server-dir looks absolute ('${{ inputs.server-dir }}'). Most FTP roots are chrooted; use relative paths like './' or './subfolder/'."
        fi

    - name: Show configuration
      shell: bash
      run: |
        echo "::group::Resolved configuration"
        echo "Has package.json: ${{ steps.detect.outputs.has_pkgjson }}"
        echo "Package manager : ${{ steps.detect.outputs.manager }}"
        echo "Lockfile        : ${{ steps.detect.outputs.lock }}"
        echo "Node version    : ${{ inputs.node-version }}"
        echo "Build cmd       : ${{ inputs.build-cmd }}"
        echo "Local dir       : ${{ inputs.local-dir }}"
        echo "Server dir      : ${{ inputs.server-dir }}"
        echo "Protocol        : ${{ inputs.protocol }}"
        echo "Clean slate     : ${{ inputs.clean-slate }}"
        echo "::endgroup::"

    # If there is package.json: set up Node (with cache if lockfile, otherwise without cache)
    - name: Setup Node (with cache)
      if: steps.detect.outputs.has_pkgjson == 'yes' && steps.detect.outputs.lock != 'none'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
        cache: ${{ steps.detect.outputs.manager }}
        cache-dependency-path: |
          pnpm-lock.yaml
          yarn.lock
          package-lock.json
          npm-shrinkwrap.json

    - name: Setup Node (no cache)
      if: steps.detect.outputs.has_pkgjson == 'yes' && steps.detect.outputs.lock == 'none'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}

    # Install deps if we have a JS project
    - name: Install dependencies
      if: steps.detect.outputs.has_pkgjson == 'yes'
      shell: bash
      run: |
        echo "::group::Install output"
        case "${{ steps.detect.outputs.manager }}" in
          pnpm)
            npm i -g pnpm
            pnpm i --frozen-lockfile || pnpm i
            ;;
          yarn)
            yarn install --frozen-lockfile || yarn install
            ;;
          npm|none)
            # npm ci requires a lockfile; fall back to npm install when none
            if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
              npm ci
            else
              npm install
            fi
            ;;
        esac
        echo "::endgroup::"

    # Build:
    # - JS project: run provided build-cmd (default npm run build)
    # - Static project (no package.json): copy everything except .git/.github into dist/
    - name: Build (JS project)
      if: steps.detect.outputs.has_pkgjson == 'yes'
      shell: bash
      run: |
        echo "::group::Build output"
        set -e
        ${{ inputs.build-cmd }}
        echo "::endgroup::"

    - name: Build (static project)
      if: steps.detect.outputs.has_pkgjson != 'yes'
      shell: bash
      run: |
        echo "::group::Static packaging"
        mkdir -p "${{ inputs.local-dir }}"
        shopt -s dotglob extglob
        cp -R !(.${{ github.workflow }}|.git|.github|${{ inputs.local-dir%/ }}) "${{ inputs.local-dir }}" 2>/dev/null || true
        echo "::notice::No package.json detected; packaged static files into '${{ inputs.local-dir }}'."
        echo "::endgroup::"

    - name: Write deploy marker
      shell: bash
      run: echo "deployed $GITHUB_SHA at $(date -u +'%Y-%m-%dT%H:%M:%SZ')" > "${{ inputs.local-dir }}/__deploy-check.txt"

    - name: Pre-deploy log
      shell: bash
      run: |
        echo "::notice::Uploading from '${{ inputs.local-dir }}' → '${{ inputs.server-dir }}' via ${{ inputs.protocol }}"

    - name: FTP Deploy
      uses: SamKirkland/FTP-Deploy-Action@v4.3.6
      with:
        server: ${{ env.FTP_HOST }}
        username: ${{ env.FTP_USER }}
        password: ${{ env.FTP_PASS }}
        protocol: ${{ inputs.protocol }}
        local-dir: ${{ inputs.local-dir }}
        server-dir: ${{ inputs.server-dir }}
        dangerous-clean-slate: ${{ inputs.clean-slate }}
        log-level: ${{ inputs.log-level }}

    - name: ✅ Summary
      if: ${{ success() }}
      shell: bash
      run: |
        {
          echo "## ✅ Deployment complete"
          echo ""
          echo "- **Commit:** \`$GITHUB_SHA\`"
          echo "- **Local dir:** \`${{ inputs.local-dir }}\`"
          echo "- **Server dir:** \`${{ inputs.server-dir }}\`"
          echo "- **Protocol:** \`${{ inputs.protocol }}\`"
        } >> "$GITHUB_STEP_SUMMARY"

    - name: ❌ Summary (failure)
      if: ${{ failure() }}
      shell: bash
      run: |
        {
          echo "## ❌ Deployment failed"
          echo ""
          echo "- Check the **Install**/**Build** and **FTP Deploy** steps above."
          echo "- Common fixes: use relative \`server-dir\` (e.g., \`./\`), verify FTP secrets, or delete \`.ftp-deploy-sync-state.json\` on the server."
        } >> "$GITHUB_STEP_SUMMARY"
